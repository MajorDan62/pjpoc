#######################################################################
# E2FG/PJ V1.0.240320 [E]xcel [2] [F]orti[G]ate Firewall Configurator #
# Dated 06/12/2023                                                    #
#######################################################################
function KillExcelProcesses{
    # Find all Excel processes
    $excelProcesses = Get-Process -Name excel -ErrorAction SilentlyContinue
    # If Excel processes are found, stop them
    if ($excelProcesses) {foreach ($process in $excelProcesses) {Stop-Process -Id $process.Id -Force}}}

function formattime{
    param ($delta)
    $timedelta  =  "$($delta.Hours)h "
    $timedelta  +=  "$($delta.Minutes)m "
    $timedelta  +=  "$($delta.Seconds)s"
    return   $timedelta}

$epoch_genesis  =   Get-date
$epoch_start    =   Get-date
cls
write-host -b white -f black "                                                     "
write-host -b white -f black "   E2FG V1.1.231206[PJ]                              "
write-host -b white -f black "   [E]xcel [2] [F]orti[G]ate Firewall Configurator   "
write-host -b white -f black "                                                     "
write-host -b green -f black "                                                     "
$Host.UI.RawUI.CursorPosition = New-Object Management.Automation.Host.Coordinates 1, 4
write-host 

$newFilepath    =   "$PWD\temp.xlsx" 
if (test-Path $newFilepath ){Remove-Item -Path $newFilepath  -Force}
# Get XLSX documents in the current directory
$xlsxFiles          =   Get-ChildItem -Path . -Filter *.xlsx
$numberOfXlsxFiles  =   $xlsxFiles.Count

$Host.UI.RawUI.CursorPosition = New-Object Management.Automation.Host.Coordinates 1, 6
if ($numberOfXlsxFiles -gt 0){write-host -f green "--Excel spreadsheeta avialable in this directory-- $cr"}
else{write-host -f red "$cr No `"excel`" data files located $cr";exit}
write-host
for ($i = 0; $i -lt $numberOfXlsxFiles; $i++) {Write-Host "$($i + 1). $($xlsxFiles[$i])"}
$host.UI.RawUI.ForegroundColor = "Green"
write-host
$userChoice = Read-Host "Enter the number of your choice"
$host.UI.RawUI.ForegroundColor = "White"
if (($userChoice -ge 1) -and ($userChoice -le $numberOfXlsxFiles))
        {write-Host -f blue "    Policy Selected  : $($xlsxFiles[($userChoice-1)])";$excelFilePath="$PWD\$($xlsxFiles[($userChoice-1)])"} 
    else 
        {Write-Host "[$userChoice] Invalid choice. Please enter a valid number.";exit}
# Open the Excel workbook
write-host -f blue "    Processing File  :"$excelFilePath   
$excel          =   New-Object -ComObject Excel.Application
$excel.Visible  =   $false
$workbook       =   $excel.Workbooks.Open($excelFilePath)
$worksheetNames =   Get-ExcelSheetInfo -Path $excelFilePath   | Select-Object -ExpandProperty Name
$pattern        =   "xx" 
$tabs           =   $worksheetNames | select-string -pattern $pattern
$tabnumbers      =   @()  
$counter=0
foreach ($selected in $tabs){For ($i = 1; $i -le $workbook.Worksheets.Count; $i++) {$worksheet = $workbook.Worksheets.Item($i);if ($worksheet.Name -eq $selected) {$tabnumbers +=  $i;break}};$counter++}
foreach ($tabnumber in $tabnumbers){
    $worksheetName      =   $workbook.Worksheets.Item($tabnumber).Name
    $rangeToUnmerge     =   $workbook.Worksheets.Item($worksheetName).Range("A1:A2")  # Adjust as needed
    $rangeToUnmerge.UnMerge()
    $workbook.Worksheets.Item($worksheetName).Range("A2") = "Type"
    $workbook.Worksheets.Item($worksheetName).Range("D2") = "Device Name"
    $workbook.Worksheets.Item($worksheetName).Range("E2") = "Interface Description"
    $workbook.Worksheets.Item($worksheetName).Range("P2") = "Switch Port"
}
$workbook.SaveAs($newFilepath)
$excel.Quit()
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel) | Out-Null
write-host -f blue "    New File Created : $newFilepath"
$epoch_end      =   Get-date
$_delta         =  $epoch_end - $epoch_start
$_delta         =  formattime $_delta
write-host -f green "Task Completed - $_delta"
############################################################################
############################################################################
$epoch_start    =   Get-date
$excel          =   New-Object -ComObject Excel.Application
$excel.Visible  =   $false
$workbook       =   $excel.Workbooks.Open($NewFilePath)
$worksheetNames =   Get-ExcelSheetInfo -Path $newFilepath | Select-Object -ExpandProperty Name
$dq             =   [char]34
$epoch_end      =   Get-date
$_delta         =   $epoch_end - $epoch_start     
$_delta         =   formattime $_delta
Write-host -f blue "    Loaded Excel spreadsheet"
$pattern        =   "xx" 
$tabs           =   $worksheetNames | select-string -pattern $pattern
foreach ($selected in $tabs){For ($i = 1; $i -le $workbook.Worksheets.Count; $i++) {$worksheet = $workbook.Worksheets.Item($i);if ($worksheet.Name -eq $selected) {$tabnumbers +=  $i;break}};$counter++}
write-host -f blue "    Number tabs to be processed = "$tabs.count
foreach ($pattern in $tabs){write-host;write-host -f blue "    Processing tab '$pattern'"
    foreach ($worksheetName in $worksheetNames) {if ($worksheetName -match $pattern){$_worksheetfound=$true;break} else {$_worksheetfound=$false}}
    $startRow       =   2
    $data           =   (Import-Excel -Path $NewFilePath -WorksheetName $worksheetName -StartRow $startRow) | where-object { $_.type -eq "Add" -and $_.'Port Type' -eq "Sub-Interface"}
    $devicename     =   $data.'Device name'| select-object  -unique
    $clustername    =  $data.'Virtual System Cluster'| select-object  -unique
    $script         =   $null
    for ($c=0;($c -lt $devicename.count);$c++)
    {
        $header       =   "config vdom
        edit "+$dq + $devicename[$c] + $dq + "
        config system interface"  
        $ipPattern  = "\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b"
        $_data      =   ($data | Where-Object {($_.'Device Name' -eq $devicename[$c]) -and ($_.'Interface Description' -ne "Spare") -and ($_.'IP Address' -match $ipPattern)})
        for ($_c=0;($_c -lt $_data.count);$_c++)
        {
            $subnetMask     =   ($_data[$_c].'Network' -split "\/")[1] 
            $alias          =   "vlan" + $_data[$_c].'VLAN ID' 
            $_devicename    =   $_data[$_c].'device name' 
            $vdom           =   $_devicename  -replace '\/', '-'     
            $vdom           =   $vdom  -replace '\&', '_and_'
            $vdom           =   $vdom  -replace 'VDOM', ''
            $vdom           =   ($vdom.toupper()).trim()
            $cluster        =   $_data[$_c].'Virtual System Cluster'
            $intfdesc       =   $_data[$_c].'Interface Description'
            if (!$intfdesc){$intfdesc = "Not Specified"}
            $template       =   "    edit " + $dq +  $_data[$_c].'Port' + $dq + "
            set vdom " + $dq + $vdom + $dq + "
            set alias " + $dq + $alias + $dq + "
            set mode static
            set ip " +  $_data[$_c].'IP Address' + "/" +  $subnetMask + "
            set interface " + $dq +  $_data[$_c].'Port' + $dq + "
            set vlanid " + $_data[$_c].'VLAN ID' + "
            set description " + $dq +  $intfdesc + $dq + "
            set status down
        next
    "

        if (Get-Variable -Name $cluster -ErrorAction SilentlyContinue) 
           {
                $existingValue = (Get-Variable -Name $cluster -ValueOnly )
                $newValue = $existingValue + $template 
                Set-Variable -Name $cluster -Value $newValue 
           } 
           else 
            {New-Variable -Name $cluster -value $template -scope local}
        }
    }

    for ($c=0;($c -lt $clustername.count);$c++)
    {
        $outfilename    =   $clustername[$c] 
        $outtextfile    =   "$PWD\$outfilename.txt"
        if (Get-Variable -Name $clustername[$c] -ErrorAction SilentlyContinue) 
            {
                $data       =   Get-Variable -Name $clustername[$c]
                $data.value | Out-File -FilePath $outtextfile
                write-host -f blue "        Cluster Data Output as '$outtextfile'"
            }
            else    
            {
               write-host -f red "FAILURE!"
            }
    }   
    
}
$epoch_end      =   Get-date
$_delta         =   $epoch_end - $epoch_start
$_delta         =   formattime $_delta
Write-host -f green "Task Completed             = $_delta"
$_delta         =   $epoch_end - $epoch_genesis   
$_delta         =   formattime $_delta
Write-host -f green "Script Running             = $_delta"
KillExcelProcesses

